# GRIPJUNE21
## Task1:Simple Linear Regression
### S.A.Akshayanjali
####  problem statement: to predict the percentage of student based on the number of study hours and calculate the predictd score
#### if a student studies for 9.25hours/day.



# import the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

#reading data from url
data="http://bit.ly/w-data"
data=pd.read_csv(data)
print("data imported")
data.head(7)

data .info()

print("row",data.shape[0])
print("col",data.shape[1])

data .dtypes


data.describe()

# checking the outliers
fig=plt.figure(figsize=(12,6))
ax=fig.add_subplot(1,2,1, title="Scores")
ax1=fig.add_subplot(1,2,2, title="Hours")

sns.boxplot(data.Scores,ax=ax)
sns.boxplot(data.Hours,ax=ax1)
plt.show()

#plotting graph to show the distribution of scores
data.plot(x="Hours",y="Scores",style="o")
plt.title("Hours vs Scores")
plt.xlabel("study hours")
plt.ylabel("scores")
plt.show()

#correlation of data
data.corr()

X=data.iloc[:,:-1].values
y=data.iloc[:,1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test=train_test_split(X,y,test_size=0.2,random_state=40)

#spliting data in to training and testing sets
print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

print(X_train, y_test)

print(X_test, y_test)

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(X_train,y_train)
print(" completed")

#regression line plotting
t_line=lr.coef_*X+lr.intercept_
#test data plotting
plt.scatter(X,y)
plt.plot(X,t_line);
plt.show()

#test set prediction
print("y_test:")
print(y_test)
print("X_test:")
print(X_test)

#scores prediction 
y_pred = lr.predict(X_test)
print("y_pred")
print(y_pred)

#Actual vs Predict
dataframe=pd.DataFrame({"Actual":y_test,"Predict":y_pred})
dataframe

# predicted score if a student study for 9.25 hours per day
hours=9.25
new_pred=lr.predict([[hours]])
print("study hours:{}".format(hours))
print("score prediction={}".format(new_pred[0]))

from sklearn import metrics

print("Mean Absolute Error:",metrics.mean_absolute_error(y_test,y_pred))

print("Mean Squared Error:",metrics.mean_squared_error(y_test,y_pred))